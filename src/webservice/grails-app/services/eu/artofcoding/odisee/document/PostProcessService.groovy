/*
 * Odisee(R)
 * Copyright (C) 2005-2010 Informationssysteme Ralf Bensmann.
 * Copyright (C) 2011-2012 art of coding UG (haftungsbeschr√§nkt).
 *
 * Alle Rechte vorbehalten. Nutzung unterliegt Lizenzbedingungen.
 * All rights reserved. Use is subject to license terms.
 */
package eu.artofcoding.odisee.document

import eu.artofcoding.grails.helper.FileHelper
import eu.artofcoding.odisee.OdiseePath
import groovy.xml.dom.DOMCategory
import org.w3c.dom.Element
import eu.artofcoding.odisee.helper.OdiseeConstant

/**
 *
 */
class PostProcessService {

    /**
     *
     */
    static transactional = false

    /**
     * The image service.
     ImageMagickService imageMagickService
     */

    /**
     * The storage service.
     */
    StorageService storageService

    /**
     * The PDF service.
     */
    PdfService pdfService

    /**
     * <action type="merge-with">
     * @param arg
     * @param actionElement
     */
    void processMergeWith(Map arg, Element actionElement) {
        def request = null
        // What file was generated by this request?
        String generatedFile = arg.result.output[0]
        if (generatedFile) {
            String requestDir = arg.requestDir
            // Create new filename
            Map decomposedFilename = FileHelper.decomposeFilename(generatedFile)
            File destPdfFile = new File(requestDir, "${decomposedFilename.name}_merged.pdf")
            List<File> pdfFiles = []
            // Get order to merge PDF files from XML request
            use(DOMCategory) {
                request = arg.xml.request[arg.activeIndex]
                // Build ordered list with PDF files to merge
                actionElement.'*'.each {
                    // <result-placeholder/>
                    // Where to place the generated PDF file?
                    if (it.name() == 'result-placeholder') {
                        pdfFiles << new File(generatedFile)
                    } else {
                        /*
                        String filename = null
                        // If path of file is relative, assume ODISEE_DEPLOY
                        if (it.'@file'.toString()[0] != '/') {
                            filename = "${OdiseePath.ODISEE_DEPLOY}/${it.'@file'.toString()}"
                        } else {
                            filename = it.'@file'.toString()
                        }
                        */
                        String filename = it.'@file'.toString()
                        pdfFiles << new File("${OdiseePath.ODISEE_USER}/${arg.principal.name}/${OdiseeConstant.S_PDF}", filename)
                    }
                }
            }
            // Merge PDFs and generate a new one
            File mergedPdf = pdfService.mergeDocuments(destPdfFile, pdfFiles)
            arg.document << storageService.createDocument(data: mergedPdf)
        }
    }

}
